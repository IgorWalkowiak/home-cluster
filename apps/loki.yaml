apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: loki
  namespace: admin
spec:
  project: default
  source:
    repoURL: registry-1.docker.io/bitnamicharts
    chart: grafana-loki
    targetRevision: 4.8.0
    helm:
      values: |
        global:
          storageClass: smb-sc
        
        loki:
          auth_enabled: false
          
          commonConfig:
            replication_factor: 1
          
          storage_config:
            filesystem:
              directory: /bitnami/loki/data
          
          schema_config:
            configs:
              - from: 2024-04-01
                store: tsdb
                object_store: filesystem
                schema: v13
                index:
                  prefix: loki_index_
                  period: 24h
          
          limits_config:
            retention_period: 744h  # 31 dni
            ingestion_rate_mb: 10
            ingestion_burst_size_mb: 20
            per_stream_rate_limit: 5MB
            per_stream_rate_limit_burst: 20MB
            reject_old_samples: true
            reject_old_samples_max_age: 30m
          
          server:
            http_listen_port: 3100
            grpc_listen_port: 9095
        
        persistence:
          enabled: true
          size: 10Gi
          storageClass: smb-sc
          accessModes:
            - ReadWriteOnce
        
        resources:
          limits:
            cpu: 2
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 512Mi
        
        service:
          type: ClusterIP
          ports:
            http: 3100
            grpc: 9095
        
        ingress:
          enabled: false
        
        serviceMonitor:
          enabled: true
          namespace: monitoring
          interval: 15s
          scrapeTimeout: 10s
        
        networkPolicy:
          enabled: false
        
        podSecurityContext:
          fsGroup: 1001
          runAsGroup: 1001
          runAsNonRoot: true
          runAsUser: 1001
        
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-rules
  namespace: monitoring
data:
  alerts.yml: |
    groups:
      - name: loki-alerts
        rules:
          - alert: LokiRequestErrors
            expr: |
              100 * sum(rate(loki_request_duration_seconds_count{status_code=~"5.."}[1m])) by (namespace, job)
                /
              sum(rate(loki_request_duration_seconds_count[1m])) by (namespace, job)
                > 10
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: Loki request error rate too high
              description: "{{ $labels.job }} {{ $labels.route }} is experiencing {{ printf \"%.2f\" $value }}% errors."
          
          - alert: LokiRequestPanic
            expr: sum(increase(loki_panic_total[10m])) by (namespace, job) > 0
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: Loki request panic
              description: "{{ $labels.job }} is experiencing {{ printf \"%.2f\" $value }} panic errors." 